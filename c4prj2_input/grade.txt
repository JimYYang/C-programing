Grading at Sat 12 Nov 2022 01:37:27 PM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==112== Memcheck, a memory error detector
==112== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==112== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==112== Command: ./tester hands.txt draw.txt
==112== Parent PID: 111
==112== 
==112== Invalid write of size 1
==112==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==112==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==112==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==112== 
==112== 
==112== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==112==  Access not within mapped region at address 0x0
==112==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==112==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==112==  If you believe this happened as a result of a stack
==112==  overflow in your program's main thread (unlikely but
==112==  possible), you can try to increase the size of the
==112==  main thread stack using the --main-stacksize= flag.
==112==  The main thread stack size used in this run was 8388608.
==112== 
==112== HEAP SUMMARY:
==112==     in use at exit: 600 bytes in 3 blocks
==112==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==112== 
==112== LEAK SUMMARY:
==112==    definitely lost: 0 bytes in 0 blocks
==112==    indirectly lost: 0 bytes in 0 blocks
==112==      possibly lost: 0 bytes in 0 blocks
==112==    still reachable: 600 bytes in 3 blocks
==112==         suppressed: 0 bytes in 0 blocks
==112== Rerun with --leak-check=full to see details of leaked memory
==112== 
==112== For lists of detected and suppressed errors, rerun with: -s
==112== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==117== Memcheck, a memory error detector
==117== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==117== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==117== Command: ./tester hands.txt draw.txt
==117== Parent PID: 116
==117== 
==117== Invalid write of size 1
==117==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==117==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==117==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==117== 
==117== 
==117== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==117==  Access not within mapped region at address 0x0
==117==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==117==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==117==  If you believe this happened as a result of a stack
==117==  overflow in your program's main thread (unlikely but
==117==  possible), you can try to increase the size of the
==117==  main thread stack using the --main-stacksize= flag.
==117==  The main thread stack size used in this run was 8388608.
==117== 
==117== HEAP SUMMARY:
==117==     in use at exit: 600 bytes in 3 blocks
==117==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==117== 
==117== LEAK SUMMARY:
==117==    definitely lost: 0 bytes in 0 blocks
==117==    indirectly lost: 0 bytes in 0 blocks
==117==      possibly lost: 0 bytes in 0 blocks
==117==    still reachable: 600 bytes in 3 blocks
==117==         suppressed: 0 bytes in 0 blocks
==117== Rerun with --leak-check=full to see details of leaked memory
==117== 
==117== For lists of detected and suppressed errors, rerun with: -s
==117== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==123== Memcheck, a memory error detector
==123== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==123== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==123== Command: ./tester h.txt d.txt
==123== Parent PID: 122
==123== 
==123== Invalid write of size 1
==123==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==123==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==123==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==123== 
==123== 
==123== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==123==  Access not within mapped region at address 0x0
==123==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==123==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==123==  If you believe this happened as a result of a stack
==123==  overflow in your program's main thread (unlikely but
==123==  possible), you can try to increase the size of the
==123==  main thread stack using the --main-stacksize= flag.
==123==  The main thread stack size used in this run was 8388608.
==123== 
==123== HEAP SUMMARY:
==123==     in use at exit: 600 bytes in 3 blocks
==123==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==123== 
==123== LEAK SUMMARY:
==123==    definitely lost: 0 bytes in 0 blocks
==123==    indirectly lost: 0 bytes in 0 blocks
==123==      possibly lost: 0 bytes in 0 blocks
==123==    still reachable: 600 bytes in 3 blocks
==123==         suppressed: 0 bytes in 0 blocks
==123== Rerun with --leak-check=full to see details of leaked memory
==123== 
==123== For lists of detected and suppressed errors, rerun with: -s
==123== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==129== Memcheck, a memory error detector
==129== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==129== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==129== Command: ./tester i1 i2
==129== Parent PID: 128
==129== 
==129== Invalid write of size 1
==129==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==129==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==129==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==129== 
==129== 
==129== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==129==  Access not within mapped region at address 0x0
==129==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==129==    by 0x10A540: main (in /graderhome/work/c4prj2_input/tester)
==129==  If you believe this happened as a result of a stack
==129==  overflow in your program's main thread (unlikely but
==129==  possible), you can try to increase the size of the
==129==  main thread stack using the --main-stacksize= flag.
==129==  The main thread stack size used in this run was 8388608.
==129== 
==129== HEAP SUMMARY:
==129==     in use at exit: 600 bytes in 3 blocks
==129==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==129== 
==129== LEAK SUMMARY:
==129==    definitely lost: 0 bytes in 0 blocks
==129==    indirectly lost: 0 bytes in 0 blocks
==129==      possibly lost: 0 bytes in 0 blocks
==129==    still reachable: 600 bytes in 3 blocks
==129==         suppressed: 0 bytes in 0 blocks
==129== Rerun with --leak-check=full to see details of leaked memory
==129== 
==129== For lists of detected and suppressed errors, rerun with: -s
==129== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
