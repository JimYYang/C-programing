Grading at Sat 12 Nov 2022 01:41:08 PM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==258== Memcheck, a memory error detector
==258== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==258== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==258== Command: ./tester hands.txt draw.txt
==258== Parent PID: 257
==258== 
==258== Invalid write of size 1
==258==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==258==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==258==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==258== 
==258== 
==258== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==258==  Access not within mapped region at address 0x0
==258==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==258==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==258==  If you believe this happened as a result of a stack
==258==  overflow in your program's main thread (unlikely but
==258==  possible), you can try to increase the size of the
==258==  main thread stack using the --main-stacksize= flag.
==258==  The main thread stack size used in this run was 8388608.
==258== 
==258== HEAP SUMMARY:
==258==     in use at exit: 600 bytes in 3 blocks
==258==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==258== 
==258== LEAK SUMMARY:
==258==    definitely lost: 0 bytes in 0 blocks
==258==    indirectly lost: 0 bytes in 0 blocks
==258==      possibly lost: 0 bytes in 0 blocks
==258==    still reachable: 600 bytes in 3 blocks
==258==         suppressed: 0 bytes in 0 blocks
==258== Rerun with --leak-check=full to see details of leaked memory
==258== 
==258== For lists of detected and suppressed errors, rerun with: -s
==258== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==263== Memcheck, a memory error detector
==263== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==263== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==263== Command: ./tester hands.txt draw.txt
==263== Parent PID: 262
==263== 
==263== Invalid write of size 1
==263==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==263==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==263==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==263== 
==263== 
==263== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==263==  Access not within mapped region at address 0x0
==263==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==263==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==263==  If you believe this happened as a result of a stack
==263==  overflow in your program's main thread (unlikely but
==263==  possible), you can try to increase the size of the
==263==  main thread stack using the --main-stacksize= flag.
==263==  The main thread stack size used in this run was 8388608.
==263== 
==263== HEAP SUMMARY:
==263==     in use at exit: 600 bytes in 3 blocks
==263==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==263== 
==263== LEAK SUMMARY:
==263==    definitely lost: 0 bytes in 0 blocks
==263==    indirectly lost: 0 bytes in 0 blocks
==263==      possibly lost: 0 bytes in 0 blocks
==263==    still reachable: 600 bytes in 3 blocks
==263==         suppressed: 0 bytes in 0 blocks
==263== Rerun with --leak-check=full to see details of leaked memory
==263== 
==263== For lists of detected and suppressed errors, rerun with: -s
==263== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==269== Memcheck, a memory error detector
==269== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==269== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==269== Command: ./tester h.txt d.txt
==269== Parent PID: 268
==269== 
==269== Invalid write of size 1
==269==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==269==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==269==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==269== 
==269== 
==269== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==269==  Access not within mapped region at address 0x0
==269==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==269==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==269==  If you believe this happened as a result of a stack
==269==  overflow in your program's main thread (unlikely but
==269==  possible), you can try to increase the size of the
==269==  main thread stack using the --main-stacksize= flag.
==269==  The main thread stack size used in this run was 8388608.
==269== 
==269== HEAP SUMMARY:
==269==     in use at exit: 600 bytes in 3 blocks
==269==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==269== 
==269== LEAK SUMMARY:
==269==    definitely lost: 0 bytes in 0 blocks
==269==    indirectly lost: 0 bytes in 0 blocks
==269==      possibly lost: 0 bytes in 0 blocks
==269==    still reachable: 600 bytes in 3 blocks
==269==         suppressed: 0 bytes in 0 blocks
==269== Rerun with --leak-check=full to see details of leaked memory
==269== 
==269== For lists of detected and suppressed errors, rerun with: -s
==269== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==275== Memcheck, a memory error detector
==275== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==275== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==275== Command: ./tester i1 i2
==275== Parent PID: 274
==275== 
==275== Invalid write of size 1
==275==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==275==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==275==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==275== 
==275== 
==275== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==275==  Access not within mapped region at address 0x0
==275==    at 0x109537: read_input (in /graderhome/work/c4prj2_input/tester)
==275==    by 0x10A54C: main (in /graderhome/work/c4prj2_input/tester)
==275==  If you believe this happened as a result of a stack
==275==  overflow in your program's main thread (unlikely but
==275==  possible), you can try to increase the size of the
==275==  main thread stack using the --main-stacksize= flag.
==275==  The main thread stack size used in this run was 8388608.
==275== 
==275== HEAP SUMMARY:
==275==     in use at exit: 600 bytes in 3 blocks
==275==   total heap usage: 4 allocs, 1 frees, 1,112 bytes allocated
==275== 
==275== LEAK SUMMARY:
==275==    definitely lost: 0 bytes in 0 blocks
==275==    indirectly lost: 0 bytes in 0 blocks
==275==      possibly lost: 0 bytes in 0 blocks
==275==    still reachable: 600 bytes in 3 blocks
==275==         suppressed: 0 bytes in 0 blocks
==275== Rerun with --leak-check=full to see details of leaked memory
==275== 
==275== For lists of detected and suppressed errors, rerun with: -s
==275== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
