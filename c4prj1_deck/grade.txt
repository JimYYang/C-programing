Grading at Sat 12 Nov 2022 03:11:49 AM UTC
Compiling deck.c -> deck.o
Compiling eval.c -> eval.o
Compiling cards.c -> cards.o
Linking eval.o, deck.o, cards.o, and our tester
Testing free_deck(deck_t *)
- Test passed
Testing add_card_to(deck_t *, card_t)
timeout: the monitored command dumped core
Valgrind reported errors:
==246== Memcheck, a memory error detector
==246== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==246== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==246== Command: ./tester act
==246== Parent PID: 245
==246== 
==246== Use of uninitialised value of size 8
==246==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10B18D: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10BB6F: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==246== 
==246== Invalid write of size 4
==246==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10B18D: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10BB6F: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==246==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==246== 
==246== 
==246== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==246==  Access not within mapped region at address 0x0
==246==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10B18D: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10BB6F: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==246==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==246==  If you believe this happened as a result of a stack
==246==  overflow in your program's main thread (unlikely but
==246==  possible), you can try to increase the size of the
==246==  main thread stack using the --main-stacksize= flag.
==246==  The main thread stack size used in this run was 8388608.
==246== 
==246== HEAP SUMMARY:
==246==     in use at exit: 904 bytes in 58 blocks
==246==   total heap usage: 58 allocs, 0 frees, 904 bytes allocated
==246== 
==246== LEAK SUMMARY:
==246==    definitely lost: 0 bytes in 0 blocks
==246==    indirectly lost: 0 bytes in 0 blocks
==246==      possibly lost: 0 bytes in 0 blocks
==246==    still reachable: 904 bytes in 58 blocks
==246==         suppressed: 0 bytes in 0 blocks
==246== Rerun with --leak-check=full to see details of leaked memory
==246== 
==246== Use --track-origins=yes to see where uninitialised values come from
==246== For lists of detected and suppressed errors, rerun with: -s
==246== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing add_empty_card(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==250== Memcheck, a memory error detector
==250== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==250== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==250== Command: ./tester aec
==250== Parent PID: 249
==250== 
==250== Use of uninitialised value of size 8
==250==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10A898: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10BF0A: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==250== 
==250== Invalid write of size 4
==250==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10A898: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10BF0A: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==250==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==250== 
==250== 
==250== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==250==  Access not within mapped region at address 0x0
==250==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10A898: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10BF0A: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==250==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==250==  If you believe this happened as a result of a stack
==250==  overflow in your program's main thread (unlikely but
==250==  possible), you can try to increase the size of the
==250==  main thread stack using the --main-stacksize= flag.
==250==  The main thread stack size used in this run was 8388608.
==250== 
==250== HEAP SUMMARY:
==250==     in use at exit: 6,944 bytes in 448 blocks
==250==   total heap usage: 456 allocs, 8 frees, 7,056 bytes allocated
==250== 
==250== LEAK SUMMARY:
==250==    definitely lost: 0 bytes in 0 blocks
==250==    indirectly lost: 0 bytes in 0 blocks
==250==      possibly lost: 0 bytes in 0 blocks
==250==    still reachable: 6,944 bytes in 448 blocks
==250==         suppressed: 0 bytes in 0 blocks
==250== Rerun with --leak-check=full to see details of leaked memory
==250== 
==250== Use --track-origins=yes to see where uninitialised values come from
==250== For lists of detected and suppressed errors, rerun with: -s
==250== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing make_deck_exclude(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==254== Memcheck, a memory error detector
==254== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==254== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==254== Command: ./tester mde
==254== Parent PID: 253
==254== 
==254== Use of uninitialised value of size 8
==254==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10A92D: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10C1DB: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==254== 
==254== Invalid write of size 4
==254==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10A92D: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10C1DB: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==254==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==254== 
==254== 
==254== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==254==  Access not within mapped region at address 0x0
==254==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10A92D: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10C1DB: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==254==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==254==  If you believe this happened as a result of a stack
==254==  overflow in your program's main thread (unlikely but
==254==  possible), you can try to increase the size of the
==254==  main thread stack using the --main-stacksize= flag.
==254==  The main thread stack size used in this run was 8388608.
==254== 
==254== HEAP SUMMARY:
==254==     in use at exit: 888 bytes in 57 blocks
==254==   total heap usage: 57 allocs, 0 frees, 888 bytes allocated
==254== 
==254== LEAK SUMMARY:
==254==    definitely lost: 0 bytes in 0 blocks
==254==    indirectly lost: 0 bytes in 0 blocks
==254==      possibly lost: 0 bytes in 0 blocks
==254==    still reachable: 888 bytes in 57 blocks
==254==         suppressed: 0 bytes in 0 blocks
==254== Rerun with --leak-check=full to see details of leaked memory
==254== 
==254== Use --track-origins=yes to see where uninitialised values come from
==254== For lists of detected and suppressed errors, rerun with: -s
==254== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing build_remaining_deck(deck_t **, size_t)
Testing with 1 hand
timeout: the monitored command dumped core
Valgrind reported errors:
==258== Memcheck, a memory error detector
==258== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==258== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==258== Command: ./tester brd
==258== Parent PID: 257
==258== 
==258== Use of uninitialised value of size 8
==258==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10A9FD: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10C488: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==258== 
==258== Invalid write of size 4
==258==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10A9FD: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10C488: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==258==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==258== 
==258== 
==258== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==258==  Access not within mapped region at address 0x0
==258==    at 0x10A81B: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10A9FD: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10C488: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==258==    by 0x10CBC1: main (in /graderhome/work/c4prj1_deck/tester)
==258==  If you believe this happened as a result of a stack
==258==  overflow in your program's main thread (unlikely but
==258==  possible), you can try to increase the size of the
==258==  main thread stack using the --main-stacksize= flag.
==258==  The main thread stack size used in this run was 8388608.
==258== 
==258== HEAP SUMMARY:
==258==     in use at exit: 104 bytes in 10 blocks
==258==   total heap usage: 11 allocs, 1 frees, 8,296 bytes allocated
==258== 
==258== LEAK SUMMARY:
==258==    definitely lost: 0 bytes in 0 blocks
==258==    indirectly lost: 0 bytes in 0 blocks
==258==      possibly lost: 0 bytes in 0 blocks
==258==    still reachable: 104 bytes in 10 blocks
==258==         suppressed: 0 bytes in 0 blocks
==258== Rerun with --leak-check=full to see details of leaked memory
==258== 
==258== Use --track-origins=yes to see where uninitialised values come from
==258== For lists of detected and suppressed errors, rerun with: -s
==258== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing get_match_count(deck_t *)
- Test passed

Overall Grade: F
